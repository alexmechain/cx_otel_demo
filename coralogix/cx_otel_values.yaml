default:
  image: 
    repository: alexmechain/otel-demo

opentelemetry-collector:
  config:
    exporters:
      coralogix:
        # The Coralogix traces ingress endpoint
        traces:
          endpoint: "otel-traces.coralogix.com:443"
        metrics:
          endpoint: "otel-metrics.coralogix.com:443"
        logs:
          endpoint: "otel-logs.coralogix.com:443"

        # Your Coralogix private key is sensitive
        private_key: "bcaf694c-6080-aa9d-bf8b-d398e2b82b39"
          #valueFrom:
            #secretKeyRef:
              #name: mysecrets
              #key: coralogix
        # AppNameSubSystem values.
        # The first non-empty resource attribute is used.
        # application_name_attributes:
        #   - "service.namespace"
        #   - "k8s.namespace.name"
        # subsystem_name_attributes:
        #   - "service.name"
        #   - "k8s.deployment.name"
        #   - "k8s.statefulset.name"
        #   - "k8s.daemonset.name"
        #   - "k8s.cronjob.name"
        #   - "k8s.job.name"
        #   - "k8s.container.name"
        # It is required that logs, metrics and traces emitted by this exporter
        # are tagged in Coralogix
        # with the default application and subsystem constants.
        # Traces, Metrics and Logs emitted by this OpenTelemetry exporter
        # are tagged in Coralogix with the default application and subsystem constants.
        application_name: "ecommerce"
        subsystem_name: "otel-demo"

        # (Optional) Timeout is the timeout for every attempt to send data to the backend.
        timeout: 30s

    processors:
      batch/traces:
        timeout: 1s
        send_batch_size: 50
      batch/metrics:
        timeout: 60s
      resourcedetection:
        detectors: [env, docker]
        timeout: 5s
        override: true

    service:
      pipelines:
        traces:
          processors: [spanmetrics, batch/traces, batch]
          exporters: [logging,  otlp,  coralogix]
        metrics:
          processors: [resourcedetection, batch/metrics, batch]
          exporters: [prometheus, logging, coralogix]
        logs:
          receivers: [otlp]
          exporters: [logging, coralogix ]

prometheus:
  kube-state-metrics:
    enabled: true
  prometheus-node-exporter:
    enabled: true
  serverFiles:
    prometheus.yml: 
      remote_write:
      - url: https://prometheus-gateway.coralogix.com/prometheus/api/v1/write
        name: 'k8smetrics'
        remote_timeout: 120s
        bearer_token: 'bcaf694c-6080-aa9d-bf8b-d398e2b82b39'  
      scrape_configs:  
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep
      
      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
        - role: endpoints
        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics     
      
      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
        - role: pod

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']

      - job_name: 'kubernetes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      
      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
